import { useState, useEffect, useCallback } from "react";
import { useQuery, useMutation } from "convex/react";
import { Id } from "../convex/_generated/dataModel";

// Pintura imports (these would need to be installed)
import "@pqina/pintura/pintura.css";
import {
  openEditor,
  locale_en_gb,
  createDefaultImageReader,
  createDefaultImageWriter,
  createDefaultImageOrienter,
  createDefaultShapePreprocessor,
  legacyDataToImageState,
  processImage,
  setPlugins,
  plugin_crop,
  plugin_crop_locale_en_gb,
  plugin_finetune,
  plugin_finetune_locale_en_gb,
  plugin_finetune_defaults,
  plugin_filter,
  plugin_filter_locale_en_gb,
  plugin_filter_defaults,
  plugin_annotate,
  plugin_annotate_locale_en_gb,
  markup_editor_defaults,
  markup_editor_locale_en_gb,
} from "@pqina/pintura";


import "filepond/dist/filepond.min.css";
import "filepond-plugin-file-poster/dist/filepond-plugin-file-poster.min.css";
import { FilePond, registerPlugin } from "react-filepond";
import FilePondPluginFileValidateType from "filepond-plugin-file-validate-type";
import FilePondPluginFilePoster from "filepond-plugin-file-poster";
import FilePondPluginImageEditor from "@pqina/filepond-plugin-image-editor";

// Mock components for demonstration (replace with actual imports)
const FilePond = ({ children, ...props }) => (
    retur
  <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
    <p className="text-gray-500 mb-4">FilePond Image Editor Component</p>
    <p className="text-sm text-gray-400">
      Replace this mock with actual FilePond component after installing dependencies
    </p>
    {children}
  </div>
);

// Mock API functions for demonstration
const api = {
  productImage: {
    getProductImages: "getProductImages",
    updateProductImage: "updateProductImage",
    generateUploadUrl: "generateUploadUrl"
  }
};


registerPlugin(
  FilePondPluginFileValidateType,
  FilePondPluginImageEditor,
  FilePondPluginFilePoster
);

setPlugins(plugin_crop, plugin_finetune, plugin_filter, plugin_annotate);

interface PinturaImageEditorProps {
  campaignId: Id<"campaigns">;
  onImageSaved?: (imageId: string) => void;
  onError?: (error: string) => void;
}

export default function PinturaImageEditor({ 
  campaignId, 
  onImageSaved, 
  onError 
}: PinturaImageEditorProps) {
  const [files, setFiles] = useState<any[]>([]);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);

  // Convex queries and mutations
  const productImages = useQuery(api.productImage.getProductImages, {
    campaignId: campaignId,
  });

  const updateProductImage = useMutation(api.productImage.updateProductImage);
  const generateUploadUrl = useMutation(api.productImage.generateUploadUrl);

  // Load existing images into FilePond
  useEffect(() => {
    if (productImages && productImages.length > 0) {
      const existingFiles = productImages.map(image => ({
        source: image.url,
        options: {
          type: 'local',
          file: {
            name: image.filename || 'image.jpg',
            size: image.size || 0,
            type: image.contentType || 'image/jpeg'
          }
        }
      }));
      setFiles(existingFiles);
    }
  }, [productImages]);

  // Handle file upload to Convex
  const handleFileUpload = useCallback(async (file: File, imageState?: any) => {
    try {
      setIsUploading(true);
      setUploadProgress(0);

      // Generate upload URL
      const uploadUrl = await generateUploadUrl();
      
      // Create form data
      const formData = new FormData();
      formData.append('file', file);

      // Upload file with progress tracking
      const response = await fetch(uploadUrl, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Upload failed');
      }

      const result = await response.json();
      const storageId = result.storageId;

      // Update product image record
      const imageId = await updateProductImage({
        campaignId,
        storageId,
        filename: file.name,
        contentType: file.type,
        size: file.size,
        imageState: imageState || null, // Store Pintura editor state
      });

      setUploadProgress(100);
      onImageSaved?.(imageId);
      
      return imageId;
    } catch (error) {
      console.error('Upload error:', error);
      onError?.(error instanceof Error ? error.message : 'Upload failed');
      throw error;
    } finally {
      setIsUploading(false);
      setUploadProgress(0);
    }
  }, [campaignId, generateUploadUrl, updateProductImage, onImageSaved, onError]);

  // Handle file processing after editing
  const handleFileProcess = useCallback(async (fieldName: string, file: File, metadata: any) => {
    const { imageState } = metadata;
    return await handleFileUpload(file, imageState);
  }, [handleFileUpload]);

  // Handle file updates (when editing existing images)
  const handleFileUpdate = useCallback(async (file: File, imageState: any, imageId: string) => {
    try {
      setIsUploading(true);
      
      // Generate new upload URL
      const uploadUrl = await generateUploadUrl();
      
      // Create form data
      const formData = new FormData();
      formData.append('file', file);

      // Upload updated file
      const response = await fetch(uploadUrl, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Update failed');
      }

      const result = await response.json();
      const storageId = result.storageId;

      // Update existing image record
      await updateProductImage({
        id: imageId,
        campaignId,
        storageId,
        filename: file.name,
        contentType: file.type,
        size: file.size,
        imageState,
      });

      onImageSaved?.(imageId);
    } catch (error) {
      console.error('Update error:', error);
      onError?.(error instanceof Error ? error.message : 'Update failed');
    } finally {
      setIsUploading(false);
    }
  }, [campaignId, generateUploadUrl, updateProductImage, onImageSaved, onError]);

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h2 className="text-2xl font-semibold text-gray-900 mb-6">
          Image Editor
        </h2>
        
        {/* Upload Progress */}
        {isUploading && (
          <div className="mb-4">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-gray-700">
                Uploading...
              </span>
              <span className="text-sm text-gray-500">
                {uploadProgress}%
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${uploadProgress}%` }}
              />
            </div>
          </div>
        )}

        {/* FilePond Component */}
        <FilePond
          files={files}
          onupdatefiles={setFiles}
          acceptedFileTypes={["image/*"]}
          allowMultiple={true}
          name="files"
          disabled={isUploading}
          
          // Custom server configuration for Convex
          server={{
            process: handleFileProcess,
            revert: null, // Handle revert if needed
            restore: null, // Handle restore if needed
            load: null, // Handle load if needed
            fetch: null, // Handle fetch if needed
          }}
          
          // FilePond configuration
          maxFiles={10}
          maxFileSize="10MB"
          
          // File poster configuration
          filePosterMaxHeight={256}
          
          // Image editor configuration (uncomment when dependencies are installed)
          /*
          imageEditor={{
            legacyDataToImageState: legacyDataToImageState,
            createEditor: openEditor,
            
            imageReader: [
              createDefaultImageReader,
              {
                // Optional image reader options
              },
            ],
            
            imageWriter: [
              createDefaultImageWriter,
              {
                targetSize: {
                  width: 1920,
                  height: 1080,
                },
                quality: 0.9,
              },
            ],
            
            imageProcessor: processImage,
            
            editorOptions: {
              utils: ["crop", "finetune", "filter", "annotate"],
              imageOrienter: createDefaultImageOrienter(),
              shapePreprocessor: createDefaultShapePreprocessor(),
              ...plugin_finetune_defaults,
              ...plugin_filter_defaults,
              ...markup_editor_defaults,
              
              locale: {
                ...locale_en_gb,
                ...plugin_crop_locale_en_gb,
                ...plugin_finetune_locale_en_gb,
                ...plugin_filter_locale_en_gb,
                ...plugin_annotate_locale_en_gb,
                ...markup_editor_locale_en_gb,
              },
              
              // Custom styling
              style: {
                '--editor-toolbar-background': '#ffffff',
                '--editor-toolbar-border': '#e5e7eb',
              },
            },
            
            // Handle editor events
            onloaderror: (error) => {
              console.error('Editor load error:', error);
              onError?.('Failed to load image editor');
            },
            
            onprocess: (imageState, output) => {
              console.log('Image processed:', { imageState, output });
            },
          }}
          */
        />

        {/* Image Gallery */}
        {productImages && productImages.length > 0 && (
          <div className="mt-8">
            <h3 className="text-lg font-medium text-gray-900 mb-4">
              Saved Images ({productImages.length})
            </h3>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
              {productImages.map((image) => (
                <div 
                  key={image._id} 
                  className="relative group rounded-lg overflow-hidden bg-gray-100 aspect-square"
                >
                  <img
                    src={image.url}
                    alt={image.filename || 'Product image'}
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-200">
                    <div className="absolute bottom-2 left-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                      <p className="text-white text-xs truncate">
                        {image.filename}
                      </p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Instructions */}
        <div className="mt-6 p-4 bg-blue-50 rounded-lg">
          <h4 className="text-sm font-medium text-blue-900 mb-2">
            Setup Instructions:
          </h4>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>• Install: npm install @pqina/pintura @pqina/filepond-plugin-image-editor</li>
            <li>• Install: npm install filepond react-filepond filepond-plugin-file-validate-type</li>
            <li>• Uncomment the import statements and FilePond configuration</li>
            <li>• Configure your Convex backend functions</li>
          </ul>
        </div>
      </div>
    </div>
  );
}